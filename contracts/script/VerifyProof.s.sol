// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Script, console} from "forge-std/Script.sol";
import "../src/Counter.sol";  // Import your Groth16Verifier contract

contract VerifyProofScript is Script, Groth16Verifier {
    function setUp() public {}

    function run() public {
        // Replace with your actual deployed contract address
        address verifierAddress = address(0);  // Your deployed verifier address
        Groth16Verifier verifier = Groth16Verifier(verifierAddress);
        
        // Prepare proof data
        uint[2] memory pA = [
            0x2f71863f3b506203bd6009a3425e8ad147e107be71a44a8e83a635bc6ad50754,
            0x1d68ae47d47a952f645be4d63dfebb33939bb13a49486f1209ca3d96965ac0eb
        ];
        
        uint[2][2] memory pB = [
            [
                0x19c5cd94f0647b5500b20d2838705155680c14c11fb80e62d06e6c8a268c74af,
                0x22df1700aef94718503aec3074c853d7101927f8bfcea4ed516ca1f0621470d9
            ],
            [
                0x09fcb0844e20229ffe913752a9bbd644b54ea48dbd079440e76d0637741e4e9c,
                0x10653ec14451b15d8c00bccdb203b3cf18e569eb0479085509f0d97fd2035d4c
            ]
        ];
        
        uint[2] memory pC = [
            0x21cf93c2b3435b2b5f2d34bc3571c161a40241174861856b648f3940e3633ea8,
            0x26e5e680d07c63fe01cfbea1ded6c8f22f194e26d69aad83e43e2495777ac0ea
        ];
        
        uint[39] memory pubSignals = [
            0x000000000068747470733a2f2f6163636f756e74732e676f6f676c652e636f6d,
            0x2733a65ab5d61d463c326ab8cf1d66d4e19377f32781ecc5c5b30392d6c5462d,
            0x000000000000000000000000000000000000000000000000247435ff6409f44d,
            0x000000000000000000000000000000000000000000000000c29e20afbbb0e910,
            0x0000000000000000000000000000000000000000000000007596fcdbd9e1608f,
            0x000000000000000000000000000000000000000000000000ff2efc54ec02acdd,
            0x00000000000000000000000000000000000000000000000093c13329d2b39b7d,
            0x0000000000000000000000000000000000000000000000005ecb4c8801c3a4c3,
            0x000000000000000000000000000000000000000000000000f26ca995897aaefb,
            0x000000000000000000000000000000000000000000000000ee0ae1602be888fa,
            0x0000000000000000000000000000000000000000000000006b06cfb6f6c90acb,
            0x0000000000000000000000000000000000000000000000009f7f2adeffc0f039,
            0x0000000000000000000000000000000000000000000000007e8215f110e0d637,
            0x0000000000000000000000000000000000000000000000002238eb28a915d820,
            0x0000000000000000000000000000000000000000000000001269e7c3312952a2,
            0x000000000000000000000000000000000000000000000000303fef017bce623e,
            0x000000000000000000000000000000000000000000000000c2428d69da37f51a,
            0x000000000000000000000000000000000000000000000000a74a149a399e00b4,
            0x0000000000000000000000000000000000000000000000006e590ceb18db03c1,
            0x000000000000000000000000000000000000000000000000da95418bdbae65e5,
            0x000000000000000000000000000000000000000000000000df8134efa2828351,
            0x000000000000000000000000000000000000000000000000bac1a06191ae5a18,
            0x000000000000000000000000000000000000000000000000dc19a634d70112bd,
            0x000000000000000000000000000000000000000000000000bdb8b9f218fe4631,
            0x000000000000000000000000000000000000000000000000bd5eb892bbe21f69,
            0x000000000000000000000000000000000000000000000000c7f4ab75f9374a4d,
            0x000000000000000000000000000000000000000000000000b8f44ce069b12250,
            0x000000000000000000000000000000000000000000000000c6ca9626892eebdc,
            0x000000000000000000000000000000000000000000000000115b9cfd02fd7912,
            0x000000000000000000000000000000000000000000000000098435a177bbea5a,
            0x0000000000000000000000000000000000000000000000006cad7a683b4385b6,
            0x000000000000000000000000000000000000000000000000f012d94bad0c4912,
            0x000000000000000000000000000000000000000000000000625ef1c6081e67ad,
            0x0000000000000000000000000000000000000000000000008dbed6b6af5a0cca,
            0x000000000000000000000000000000000000000000000000000000003b9aca00,
            0x000000000000000000000000000000008318535b54105d4a7aae60c08fc45f96,
            0x0000000000000000000000000000000087181b4fdfc625bd1a753fa7397fed75,
            0x000000000000000000000000000000003547f11ca8696646f2f3acb08e31016a,
            0x00000000000000000000000000000000fac23e630c5d11f59f61fef57b0d2aa5
        ];
        
        vm.startBroadcast();
        
        console.log("Calling verifyProof...");
        
        bool result = this.verifyProof(pA, pB, pC, pubSignals);
        
        if (result) {
            console.log("Proof verification SUCCESSFUL!");
        } else {
            console.log("Proof verification FAILED!");
        }
        
        vm.stopBroadcast();
    }
}